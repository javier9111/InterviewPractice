package com.java.test.program.interview;

/***
 * 
 * Write an algorithm to determine if a number n is happy.

A happy number is a number defined by the following process:

Starting with any positive integer, replace the number by the sum of the squares of its digits.
Repeat the process until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy.
Return true if n is a happy number, and false if not.

 

Example 1:

Input: n = 19
Output: true
Explanation:
12 + 92 = 82
82 + 22 = 68
62 + 82 = 100
12 + 02 + 02 = 1
Example 2:

Input: n = 2
Output: false
 

Constraints:

1 <= n <= 231 - 1
 * @author ringo
 *
 */

public class HappyNumber {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		int value = 19;
		int value2 = 20;
		int value3 =  60000;
		

		System.out.println(isHappy(value3));
		
		
	}

	 private static boolean isHappy(int n) {
	        
		 
		 //the number has to be divide on digits rise to square 
		 
		 
		 // brute force is to divide the digits until to get the first number and then go
		 // issue will be if it loops itself
		 // seems that if it goes to 1 digit and is not 1 then we can it call it a no happy number
		 
		 // first go one by one digit and do the sum,
		 // sum is going to be the next one to be one by one digit
		 
		 
		 double sum =0;
		 
		 double myNumber = n;
		 double tempNumber = 0;
		 double newNumber= 0;
		 
		 while( myNumber > 9){
			 
			 
			tempNumber= myNumber%10;
			
			sum =sum+Math.sqrt(tempNumber);
			
			if(sum == 1){
				return true;
			}
			
			myNumber = myNumber/10;
			
			if(myNumber == 0 ){
				
				myNumber = sum;
				sum = 0;
			}
		 }
		 
		 return myNumber == 1 ;
	    }
}
