package CrackingCodeInterview.LinkedLists;

import CrackingCodeInterview.LinkedLists.common.Node;
import CrackingCodeInterview.LinkedLists.common.Utils;

/***
 * Write code to partition a linked list around a value x, such that all node
 * less than x come before all nodes grater than or equal to x. (Important the partition element x
 * can appear anywhere in the "right partition"; it does not need to appear between the left and right partition
 * The additional spacing in the example below indicates the partition. Yes the output below is one of many valid outputs
 * 
 * Example 
 * input 3->5->8->5->10->2->1 [partition=5]
 * Output 3->1->2->     ->     10 -> 5-> 5-> 8
 * 
 * @author ringo
 *
 */
public class Partition {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		// result 2-3-4-3-4-8-10-9
		Node n1 = new Node(8);
		Node n2 = new Node(2);
		Node n3 = new Node(3);
		Node n4 = new Node(10);
		Node n5 = new Node(4);
		Node n6 = new Node(6);
		Node n7 = new Node(3);
		Node n8 = new Node(4);
		Node n9 = new Node(9);
		
		
		n1.next = n2;
		n2.next = n3;
		n3.next = n4;
		n4.next = n5;
		n5.next = n6;
		n6.next = n7;
		n7.next = n8;
		n8.next = n9;
		n9.next = null;
		
		System.out.println("Before deleting-------------");
		Utils.printNodes(n1);
		
		//before
		
		partition(n1, 5);
		System.out.println("After deleting -----------------");
		
		Utils.printNodes(n1);
		

	}

	
	
	
	public static void partition(Node head, int partition){
		
		 Node temp = head;
		 Node partitionHead = head;
		 Node more = null;
		 while(temp.next !=null){
			 
			 if(temp.data < partition){
				 
				 partitionHead.data=temp.data;
				 partitionHead = partitionHead.next;
				 
			 }
			 temp = temp.next;
			 
		 }
		 
		 
		
		
	}
}
