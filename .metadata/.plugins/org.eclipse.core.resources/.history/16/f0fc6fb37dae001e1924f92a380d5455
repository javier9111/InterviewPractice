package leetCode;

import Utils.ListNode;

public class ReverseLinkedList {

	/**
	 * Definition for singly-linked list.

	 */
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		ListNode node5 = new ListNode(5);
		ListNode node4 = new ListNode(4,node5);
		ListNode node3 = new ListNode(3,node4);
		ListNode node2 = new ListNode(2,node3);
		ListNode head = new ListNode(1, node2);
		
		
		
		printListNode(head);
		
		ListNode reverseList = reverseList(head);
		
		
		printListNode(reverseList);
		
	}

	
	public static void printListNode(ListNode Node){
		System.out.println(Node.val);
		if(Node.next!= null ){
			printListNode(Node.next);
		}
	}
	
	
	public static ListNode reverseList(ListNode head) {
        
		ListNode reverseList = new ListNode(head.val);
		
		System.out.println("before recursive");
		
		System.out.println("List intitial value:"+ reverseList.val);
		ListNode result = reverseNode(head.next,reverseList);
		System.out.println("after recursive");
		return result;
    }
	
	public static ListNode reverseNode(ListNode next, ListNode reverseNext){
		ListNode reverseNextNext = new ListNode(next.val,reverseNext);
		
		System.out.println("node value:"+ reverseNextNext.val);
		if(next.next == null){
			return null;
		} else {
			reverseNext.
			reverseNode(next.next,reverseNextNext);
		}
		return reverseNextNext;
	}
	
}

