package LeetCodeExc.medium;

import java.util.ArrayList;
import java.util.List;


/***
 * Given an array of strings strs, group the anagrams together. You can return the answer in any order.
 * 
 * An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.
 * 
 * @author ringo
 *
 */
public class AnagramGroup {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		String[] anagrams = {"awe","wea","way","yaw","polo","loop","pool"};
		List<List<String>> groupList = groupAnagrams(anagrams);
		
		
		for(List<String> group: groupList)
		{
			System.out.print("[");
			for(String anagram : group)
			{
				System.out.print("[");
				System.out.print(anagram+",");
				System.out.print("]");
			}
			System.out.print("]");
			
		}
		
	}

	
	 public static List<List<String>> groupAnagrams(String[] strs) {
	     
		 List<List<String>> group = new ArrayList<List<String>>();
		 //definir el anagrama
		 //crear una lista por primer anagrama encontrado
		 //agregar anagrama al la lista correspondiente
		 
		 
		 //definir el anagrama necesito, 1.- contains the same amount of letters, 2.-the order is different
		 
		 for(int i=0; i<strs.length; i++)
		 {
			 belongList(strs[i], group);
		 }
		 return group;
	    }
	 
	 public static void belongList(String anagram, List<List<String>> listgroup)
	 {
		 boolean exist = false;
		 for(List<String> group : listgroup)
		 {
			 if(itBelongs(anagram,group.get(0))){
				 exist =true;
				 group.add(anagram);
			 }
		 }
		 if(!exist)
		 {
			 List<String> newGroup = new ArrayList<String>();
			 newGroup.add(anagram);
			 listgroup.add(newGroup);
		 }
		 
	 }
	 
	 public static boolean itBelongs(String anagram, String listItem)
	 {
		 if(anagram.length()!= listItem.length())
		 {
			 return false;
		 }
		 String tempanagram = anagram;
		 
		 for(int i=0; i<listItem.length(); i++)
		 {
			 tempanagram = tempanagram.substring(0, tempanagram.indexOf(listItem.charAt(i)))+tempanagram.substring( tempanagram.indexOf(listItem.charAt(i)),tempanagram.length()-1);
		 }
		 
		 return tempanagram.length()==0;
	 }
}
