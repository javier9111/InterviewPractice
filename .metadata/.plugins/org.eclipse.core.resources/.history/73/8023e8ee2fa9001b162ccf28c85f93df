package LeetCodeExc;

import org.omg.CORBA.RepositoryIdHelper;

/***
 * Given an array nums and a value val, remove all instances of that value in-place and return the new length.
 * 
 * Do not allocate extra space for another array, you must do this by modifying the input array in-place with O(1) extra memory.
 * 
 * The order of elements can be changed. It doesn't matter what you leave beyond the new length.
 * 
 * Clarification:
 * 
 * Confused why the returned value is an integer but your answer is an array?
 * 
 * Note that the input array is passed in by reference, which means a modification to the input array will be known to the caller as well.
 * 
 * Internally you can think of this:
 * 
 * // nums is passed in by reference. (i.e., without making a copy)
 * int len = removeElement(nums, val);
 * 
 * // any modification to nums in your function would be known by the caller.
 * // using the length returned by your function, it prints the first len elements.
 * for (int i = 0; i < len; i++) {
 *     print(nums[i]);
 *}
 * @author ringo
 *
 */
public class RemoveElement {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] nums = {0,0,1,1,1,2,2,3,3,4};
		
		int[] nums2= {1,1,2};
		
		System.out.println( "this is the length: "+removeElement(nums, 1));


		for(int i=0; i<nums.length; i++)
		{
			System.out.print(nums[i]+",");
		}
	}
	
	public static int removeElement(int[] nums, int val) {
		
		int recpos=0, len=0, pos=0;
		for(int i = 0; i<nums.length; i++)
		{
			if(nums[i]!=val)
			{
				pos =i;
				System.out.println(pos);
				nums[recpos]=nums[i];
				len++;
				recpos=pos;
				System.out.println(recpos);
			}
		}
		
		
       return len; 
    }
}
