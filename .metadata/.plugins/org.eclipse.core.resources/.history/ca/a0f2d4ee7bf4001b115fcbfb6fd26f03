package LeetCodeExc.medium;

/***
 * Given a linked list, swap every two adjacent nodes and return its head. 
 * You must solve the problem without modifying the values in the list's nodes 
 * (i.e., only nodes themselves may be changed.)
 * Input: head = [1,2,3,4]
 * Output: [2,1,4,3]
 * Input: head = []
 * Output: []
 * Input: head = [1]
 * Output: [1]
 * @author ringo
 *
 */
public class SwapNodes {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

  public static ListNode swapPairs(ListNode head) {
     
	  if(head == null|| head.next == null)
	  {
		  return head;
	  }
	  ListNode dummyHead = new ListNode(0);
	  
	  ListNode curr = dummyHead;
	  
	  int prevValue =0, nextVal =0;
	  
	  
	  {
		  prevValue = head.val;
		  nextVal = head.next.val;
		  curr.next = new ListNode(nextVal);
		  curr.next.next = new ListNode(prevValue);
		  head = head.next.next;
		  curr = curr.next.next;
	  }while( head != null)
	  
	  

	return dummyHead;
    }
}
