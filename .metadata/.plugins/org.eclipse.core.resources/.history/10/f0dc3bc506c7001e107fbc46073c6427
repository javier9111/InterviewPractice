package LeetCodeExc;

import java.util.Arrays;

/**
 * Given an integer array nums, move all 0's to the end of it while maintaining the relative order of the non-zero elements.

Note that you must do this in-place without making a copy of the array.

 

Example 1:

Input: nums = [0,1,0,3,12]
Output: [1,3,12,0,0]
Example 2:

Input: nums = [0]
Output: [0]
 

Constraints:

1 <= nums.length <= 104
-231 <= nums[i] <= 231 - 1
 * @author ringo
 *
 */
public class MoveZeroes {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] nums = {0,1,0,3,12};
		int[] nums2 = {0,1};
		int[] nums3 = {2,1};
		
		
		moveZeroes(nums);
		
		Arrays.stream(nums).forEach(System.out::println);
		
		
	}

	
	
	
	 public static void moveZeroes(int[] nums) {
	        
		 if(nums.length>1){ 
		 
			 int pointerArr = 0;
			 int innerPointer =0;
			 int counter =0;
			 while(counter<nums.length){
				 
				 
				 
				 if(nums[pointerArr] ==0){
					 
					 int temp =nums[innerPointer+1];
					 nums[innerPointer+1]=0;
					 nums[pointerArr] =temp;
					 innerPointer++;
					 
				 	}else{
				 		pointerArr++;
				 		counter++;
				 	}
				 
				 if(innerPointer == nums.length-1){
					 innerPointer=pointerArr;
					 counter++;
				 }
				 
			 	}
			 
			 }
	 }
}
