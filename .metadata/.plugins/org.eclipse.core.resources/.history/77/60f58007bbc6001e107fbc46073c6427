package LeetCodeExc;

import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

/***
 * 
 * Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

 

Example 1:

Input: nums = [2,2,1]
Output: 1
Example 2:

Input: nums = [4,1,2,1,2]
Output: 4
Example 3:

Input: nums = [1]
Output: 1
 

Constraints:

1 <= nums.length <= 3 * 104
-3 * 104 <= nums[i] <= 3 * 104
Each element in the array appears twice except for one element which appears only once.
 * @author ringo
 *
 */
public class SummaryNumber {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] nums = {2,2,1};
		
		
		System.out.println(singleNumber(nums));
		System.out.println(singleNumberArr(nums));
		
	}
	
	
	//solution 1 using maps
	 public static int singleNumber(int[] nums) {
	        

	        Map<Integer,Integer> map = new HashMap<>();

	        for(int i=0; i<nums.length; i++){
	            
	        		map.put(nums[i], map.getOrDefault(nums[i], 0)+1);
	        }
	
	        Optional<Integer> result = map.entrySet().stream()
	                .filter(entry -> entry.getValue() == 1)
	                .map(Map.Entry::getKey)
	                .findFirst();

	        // Assign the result to an int variable
	        int foundValue = result.orElse(-1); // Default value -1 if no value is found

	        
	        return foundValue;

	    }
	 
	 
	 //solution using array
	 public static int singleNumberArr(int[] nums) {
	     int foundValue =-1;
	     int countReps =0;

	     
	     	for(int i=0; i<nums.length; i++){
	     		
	     		
	     		for(int j=0; j<nums.length; j++){
	     			
	     			if(j == i){
	     				continue;
	     			}
	     			
	     			if(nums[i]== nums[j]){
	     				countReps++;
	     			}
	     		}
	     		if(countReps == 0){
	     			foundValue = nums[i];
	     			break;
	     		}
	     		
	     		
	     	}
	     	
	     
	     
	        
	        return foundValue;

	    }

}
