package LeetCodeExc;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

/***
 * 
 * Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.

 

Example 1:

Input: nums1 = [1,2,2,1], nums2 = [2,2]
Output: [2]
Example 2:

Input: nums1 = [4,9,5], nums2 = [9,4,9,8,4]
Output: [9,4]
Explanation: [4,9] is also accepted.
 

Constraints:

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000
 * 
 * 
 * @author ringo
 *
 */
public class IntersectionArrays {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		int[] arr1 = {1,2,2,1};
		int[] arr2 = {2,2};
		
		
		int[] arr3 = {4,9,5};
		int[] arr4 = {9,4,9,8,4};
		
		
		int[] arr5 = {1,5,4,6,8};
		int[] arr6 = {6,8,3,10};
		
	
		int[] arr7 = {1,5,4,6,8};
		int[] arr8 = {10,11,12,13};
		
		
		
		
		Arrays.stream(intersection(arr3, arr4)).forEach(System.out::println);
		

	}

	
	
	 public static int[] intersection(int[] nums1, int[] nums2) {
		 
		 //I can sort the arrays then add the intersected ones on a hashSet, and finally convert it to a array
		 
		
		 Set<Integer> result = new HashSet<>();
		 
		 Arrays.sort(nums1);
		 Arrays.sort(nums2);
		 int l =0;
		 int r =nums2.length-1;
		 int counter=0;
		while(counter<nums1.length){
				int m = l+(r-l)/2;
				
				if(nums1[counter] == nums2[m] ){
					result.add(nums1[counter]);
					l++;
				}else if(nums1[counter]> nums2[m]){
					l = m+1;
				}else{
					r = m-1;
				}
				 
				if(l>=r){
					counter++;
					l=0;
					r=nums2.length-1;
				}
			 }
		int[] arrResult = new int[result.size()];
		int arrcounter =0;
		for(int i : result){
			arrResult[arrcounter] =i;
			arrcounter++;
		}
		
		return arrResult;
	    }
}
