package LeetCodeExc;

import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

/***
 * You are given an array nums consisting of positive integers.

Return the total frequencies of elements in nums such that those elements all have the maximum frequency.

The frequency of an element is the number of occurrences of that element in the array.

 

Example 1:

Input: nums = [1,2,2,3,1,4]
Output: 4
Explanation: The elements 1 and 2 have a frequency of 2 which is the maximum frequency in the array.
So the number of elements in the array with maximum frequency is 4.
Example 2:

Input: nums = [1,2,3,4,5]
Output: 5
Explanation: All elements of the array have a frequency of 1 which is the maximum.
So the number of elements in the array with maximum frequency is 5.
 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 100
 * @author ringo
 *
 */
public class MaxFrequencyElements {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		int[] arr1 = {1,2,3,4,5};
		int[] arr2 = {1,2,2,3,1,4};
		int[] arr3 = {1,2,2,3,3,3,1,4};
		int[] arr4 = {1,2,2,3,3,3,1,4,4,4,5,5,5,0};
		
		
		
		
		System.out.println(maxFrequencyElements(arr1));
		
	}

	
	// can be done by 2 ways

	// 2 order the array and compare the occurrences by having a max value.
	
	public static int maxFrequencyElements(int[] nums){
		
		if(nums.length <=1) return 1;
		
		Arrays.sort(nums);
		
		int maxRep=0;
		int tempMaxRep=1;
		int prevNumber = nums[0];
		int reps = 1;
		for(int i=1; i<nums.length; i++){
			
			if(nums[i] == prevNumber){
				
				tempMaxRep++;
			}else{
				if(tempMaxRep>maxRep){
					maxRep = tempMaxRep;	
				}
				tempMaxRep=1;
			}
			prevNumber = nums[i];
		}
		tempMaxRep=1;
		prevNumber = nums[0];
		for(int i=1; i<nums.length; i++){
			
			if(nums[i] == prevNumber){
				
				tempMaxRep++;
			}else{
				if(tempMaxRep == maxRep){
					reps++;
				}
				tempMaxRep=1;
			}
			prevNumber = nums[i];
		}
		
		
		return reps*maxRep;
		
	}
	
	
	
	//solution 2 didnt like it because it has entries
//	public static int maxFrequencyElements(int[] nums) {
//	     
//		
//		
//	// 1 save in a hashmap a key number and value number of occurrences in it
//		
//
//		Map<Integer,Integer> map = new HashMap();
//		
//		for(int i=0; i<nums.length; i++){
//			
//			if(map.containsKey(nums[i])){
//				map.put(nums[i], map.get(nums[i])+1);
//			}else{
//				map.put(nums[i], 1);
//			}
//			
//		}
//		
//		  Entry<Integer, Integer> result = map.entrySet().stream()
//                .max(Map.Entry.comparingByValue())
//                .orElse(null);
//		  
//		  int maxValue =0;
//		  for(Entry<Integer, Integer> entry : map.entrySet()){
//			  
//			  if(entry.getValue() == result.getValue()){
//				  maxValue++;
//			  }
//		  }
//		  
//
//		return maxValue*result.getValue();
//	    }
}
