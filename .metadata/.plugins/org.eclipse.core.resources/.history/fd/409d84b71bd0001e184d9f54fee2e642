package CrackingCodeInterview.LinkedLists;

import CrackingCodeInterview.LinkedLists.common.Node;
import CrackingCodeInterview.LinkedLists.common.Utils;

/***
 * 
 * Impplement an algrith to delete a node in the middle, any node between the first and the last node, not nocessarily the exact middle, of a singly linked list given
 * only access to that node
 * 
 * input: node c from the linked list a->b->c->d->e->f
 * result: nothing returned but the new linked list looks like a->b->d->e->f
 * 
 * @author ringo
 *
 */
public class DeleteMiddelNode {

	public static void main(String[] args) {

		Node n1 = new Node(1);
		Node n2 = new Node(2);
		Node n3 = new Node(3);
		Node n4 = new Node(4);
		Node n5 = new Node(5);
		Node n6 = new Node(6);
		Node n7 = new Node(7);
		Node n8 = new Node(8);
		Node n9 = new Node(9);
		
		
		n1.next = n2;
		n2.next = n3;
		n3.next = n4;
		n4.next = n5;
		n5.next = n6;
		n6.next = n7;
		n7.next = n8;
		n8.next = n9;
		n9.next = null;
		
		System.out.println("Before deleting-------------");
		Utils.printNodes(n1);
		
		//before
		
		deleteNode(n1);
		System.out.println("After deleting -----------------");
		
		Utils.printNodes(n1);
		

	}

	
	
	
	
	
	public static void deleteNode(Node deleteNode){

		if(deleteNode!=null|| deleteNode.next==null){
			
			System.out.println("Node is at the start or the end");
		}else{
		
					deleteNode.data=deleteNode.next.data;
					deleteNode.next = deleteNode.next.next;
		}
	}
}
